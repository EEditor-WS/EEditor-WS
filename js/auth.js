const DISCORD_CLIENT_ID = '1333948751919972434';
const DISCORD_REDIRECT_URI = window.location.origin + '/auth/discord/callback';
const GITHUB_REPO = 'EE-Apps/ws-eeditor.accounts';
const COOKIE_NAME = 'ee_auth';
const COOKIE_EXPIRES_DAYS = 30;

class AuthManager {
    constructor() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthManager...');
        this.currentUser = null;
        this.translations = {
            en: {
                guest: 'Guest',
                login: 'Login with Discord',
                register: 'Register',
                settings: 'Settings',
                logout: 'Logout'
            },
            ru: {
                guest: '–ì–æ—Å—Ç—å',
                login: '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Discord',
                register: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                logout: '–í—ã–π—Ç–∏'
            },
            uk: {
                guest: '–ì—ñ—Å—Ç—å',
                login: '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Discord',
                register: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è',
                settings: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                logout: '–í–∏–π—Ç–∏'
            }
        };
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É DOM –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }

    init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const hasInterface = document.querySelector('.account-name') !== null;
        
        if (hasInterface) {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const loginButton = document.querySelector('[data-action="login"]');
            const logoutButton = document.querySelector('[data-action="logout"]');
            
            if (loginButton) {
                loginButton.addEventListener('click', () => this.loginWithDiscord());
            }
            
            if (logoutButton) {
                logoutButton.addEventListener('click', () => this.logout());
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
            document.addEventListener('languageChanged', (event) => {
                console.log('üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞:', event.detail.language);
                this.updateUI();
            });
        } else {
            console.log('‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        this.loadUserData();
    }

    setCookie(name, value, days) {
        const expires = new Date();
        expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
        document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict`;
        console.log('üç™ Cookie –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    deleteCookie(name) {
        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
        console.log('üóëÔ∏è Cookie —É–¥–∞–ª–µ–Ω—ã');
    }

    loadUserData() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        try {
            const userData = localStorage.getItem('userData');
            if (userData) {
                this.currentUser = JSON.parse(userData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.currentUser);
                this.updateUI();
            } else {
                console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                this.updateUI();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.logout();
        }
    }

    async saveUserData(userData) {
        try {
            const encryptedData = await window.cryptoManager.encrypt(userData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Cookie
            this.setCookie(COOKIE_NAME, encryptedData, COOKIE_EXPIRES_DAYS);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            localStorage.setItem('userData', encryptedData);
            
            this.currentUser = userData;
            this.updateUI();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    async saveUserToGithub(userData) {
        const filename = `users/${userData.id}.json`;
        const encryptedData = await window.cryptoManager.encrypt(userData);
        
        try {
            const githubToken = await getGithubToken();
            if (!githubToken) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GitHub');

            const response = await fetch(`https://api.github.com/repos/${GITHUB_REPO}/contents/${filename}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${githubToken}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: `Update user data for ${userData.username}`,
                    content: btoa(encryptedData),
                    branch: 'main'
                })
            });
            
            if (!response.ok) {
                throw new Error('Failed to save user data to GitHub');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ GitHub:', error);
        }
    }

    loginWithDiscord() {
        console.log('üîÑ –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Discord...');
        const params = new URLSearchParams({
            client_id: DISCORD_CLIENT_ID,
            redirect_uri: DISCORD_REDIRECT_URI,
            response_type: 'token',
            scope: 'identify'
        });

        window.location.href = `https://discord.com/api/oauth2/authorize?${params}`;
    }

    async handleDiscordCallback() {
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback Discord...');
        const fragment = new URLSearchParams(window.location.hash.slice(1));
        const accessToken = fragment.get('access_token');
        const error = fragment.get('error');
        const errorDescription = fragment.get('error_description');

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Discord:', errorDescription);
            return;
        }

        if (!accessToken) {
            console.error('‚ùå –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        try {
            console.log('üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const response = await fetch('https://discord.com/api/users/@me', {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
            }

            const data = await response.json();
            console.log('üë§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord:', data);

            const userData = {
                id: data.id,
                username: data.username,
                displayName: data.global_name || data.username,
                avatar: data.avatar ? `https://cdn.discordapp.com/avatars/${data.id}/${data.avatar}.png` : null
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            localStorage.setItem('userData', JSON.stringify(userData));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', userData);

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            window.location.href = '/';
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    logout() {
        console.log('üîÑ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...');
        localStorage.removeItem('userData');
        this.currentUser = null;
        console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        this.updateUI();
    }

    updateUI() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const accountName = document.querySelector('.account-name');
        const accountId = document.querySelector('.account-id');
        const accountAvatar = document.querySelector('.account-avatar');
        const accountButtonAvatar = document.querySelector('.account-button-avatar');
        const accountButtonIcon = document.querySelector('.account-button-icon');
        const loginItem = document.querySelector('[data-action="login"]');
        const registerItem = document.querySelector('[data-action="register"]');
        const logoutItem = document.querySelector('[data-action="logout"]');

        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        if (!accountName || !accountId) {
            console.log('‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            return;
        }

        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        const currentLang = document.body.getAttribute('data-lang') || 'ru';
        console.log('üåê –¢–µ–∫—É—â–∏–π —è–∑—ã–∫:', currentLang);

        if (this.currentUser) {
            console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
                name: this.currentUser.displayName,
                avatar: this.currentUser.avatar
            });

            accountName.textContent = this.currentUser.displayName || this.currentUser.username;
            accountId.textContent = `@${this.currentUser.username}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
            if (accountAvatar) {
                if (this.currentUser.avatar) {
                    console.log('üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –º–µ–Ω—é:', this.currentUser.avatar);
                    accountAvatar.style.display = 'none';
                    accountAvatar.src = this.currentUser.avatar;
                    accountAvatar.onerror = () => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –º–µ–Ω—é');
                        accountAvatar.style.display = 'none';
                        if (accountButtonIcon) accountButtonIcon.style.display = 'block';
                        if (accountButtonAvatar) accountButtonAvatar.style.display = 'none';
                    };
                    accountAvatar.onload = () => {
                        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –≤ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                        accountAvatar.style.display = 'block';
                    };
                } else {
                    console.log('‚ÑπÔ∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                    accountAvatar.style.display = 'none';
                    accountAvatar.src = '';
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∫–Ω–æ–ø–∫–µ
            if (accountButtonAvatar && accountButtonIcon) {
                if (this.currentUser.avatar) {
                    console.log('üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ:', this.currentUser.avatar);
                    accountButtonAvatar.style.display = 'none';
                    accountButtonAvatar.src = this.currentUser.avatar;
                    accountButtonAvatar.onerror = () => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ');
                        accountButtonIcon.style.display = 'block';
                        accountButtonAvatar.style.display = 'none';
                    };
                    accountButtonAvatar.onload = () => {
                        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                        accountButtonIcon.style.display = 'none';
                        accountButtonAvatar.style.display = 'block';
                    };
                } else {
                    accountButtonIcon.style.display = 'block';
                    accountButtonAvatar.style.display = 'none';
                    accountButtonAvatar.src = '';
                }
            }

            if (loginItem) loginItem.style.display = 'none';
            if (registerItem) registerItem.style.display = 'none';
            if (logoutItem) {
                logoutItem.style.display = 'flex';
                const logoutText = logoutItem.querySelector('[data-translate="logout"]');
                if (logoutText) {
                    logoutText.textContent = this.translations[currentLang].logout;
                }
            }
            
            console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else {
            accountName.textContent = this.translations[currentLang].guest;
            accountId.textContent = '#0000';
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
            if (accountAvatar) {
                accountAvatar.style.display = 'none';
                accountAvatar.src = '';
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∫–Ω–æ–ø–∫–µ
            if (accountButtonAvatar && accountButtonIcon) {
                accountButtonIcon.style.display = 'block';
                accountButtonAvatar.style.display = 'none';
                accountButtonAvatar.src = '';
            }

            if (loginItem) {
                loginItem.style.display = 'flex';
                const loginText = loginItem.querySelector('[data-translate="login"]');
                if (loginText) {
                    loginText.textContent = this.translations[currentLang].login;
                }
            }
            if (registerItem) {
                registerItem.style.display = 'flex';
                const registerText = registerItem.querySelector('[data-translate="register"]');
                if (registerText) {
                    registerText.textContent = this.translations[currentLang].register;
                }
            }
            if (logoutItem) logoutItem.style.display = 'none';
            
            console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥–æ—Å—Ç—è');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsItem = document.querySelector('[data-action="settings"]');
        if (settingsItem) {
            const settingsText = settingsItem.querySelector('[data-translate="settings"]');
            if (settingsText) {
                settingsText.textContent = this.translations[currentLang].settings;
            }
        }
        
        console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.authManager = new AuthManager();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ callback
if (window.location.pathname === '/auth/discord/callback') {
    window.authManager.handleDiscordCallback();
} 
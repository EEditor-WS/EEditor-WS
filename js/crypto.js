class CryptoManager {
    constructor() {
        this.encoder = new TextEncoder();
        this.decoder = new TextDecoder();
        this.loadOrGenerateKey();
    }

    loadOrGenerateKey() {
        const savedKey = localStorage.getItem('cryptoKey');
        if (savedKey) {
            console.log('üîë –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
            this.encryptionKey = savedKey;
        } else {
            this.encryptionKey = this.generateRandomPassword();
            localStorage.setItem('cryptoKey', this.encryptionKey);
            console.log('üîë –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
    async generateKey(password) {
        try {
            const keyMaterial = await crypto.subtle.importKey(
                'raw',
                this.encoder.encode(password),
                { name: 'PBKDF2' },
                false,
                ['deriveBits', 'deriveKey']
            );

            return crypto.subtle.deriveKey(
                {
                    name: 'PBKDF2',
                    salt: this.encoder.encode('EEditor-Salt'),
                    iterations: 100000,
                    hash: 'SHA-256'
                },
                keyMaterial,
                { name: 'AES-GCM', length: 256 },
                true,
                ['encrypt', 'decrypt']
            );
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞:', error);
            throw error;
        }
    }

    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async encrypt(data, password = this.encryptionKey) {
        try {
            console.log('üîê –ù–∞—á–∞–ª–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
            const key = await this.generateKey(password);
            const iv = crypto.getRandomValues(new Uint8Array(12));
            const encryptedContent = await crypto.subtle.encrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                key,
                this.encoder.encode(JSON.stringify(data))
            );

            const encryptedArray = new Uint8Array(encryptedContent);
            const resultArray = new Uint8Array(iv.length + encryptedArray.length);
            resultArray.set(iv);
            resultArray.set(encryptedArray, iv.length);

            const result = btoa(String.fromCharCode.apply(null, resultArray));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã');
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
            throw error;
        }
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async decrypt(encryptedData, password = this.encryptionKey) {
        try {
            console.log('üîì –ù–∞—á–∞–ª–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
            const key = await this.generateKey(password);
            const encryptedArray = Uint8Array.from(atob(encryptedData), c => c.charCodeAt(0));
            
            const iv = encryptedArray.slice(0, 12);
            const data = encryptedArray.slice(12);

            const decryptedContent = await crypto.subtle.decrypt(
                {
                    name: 'AES-GCM',
                    iv: iv
                },
                key,
                data
            );

            const result = JSON.parse(this.decoder.decode(decryptedContent));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã');
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
            return null;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    generateRandomPassword(length = 32) {
        const array = new Uint8Array(length);
        crypto.getRandomValues(array);
        return btoa(String.fromCharCode.apply(null, array)).slice(0, length);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
window.cryptoManager = new CryptoManager(); 
const CHUNK_SIZE = 15000;
let peer = null;
let pusher = null;
let channel = null;
let jsonString = '';
let isConnected = false;
let currentRoomId = '';
let myId = Math.random().toString(36).substr(2, 9);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase Realtime Database –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π WebSocket relay
let firebaseUrl = 'https://webrtc-relay-default-rtdb.europe-west1.firebasedatabase.app/';

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Firebase
async function sendSignalToFirebase(eventName, data) {
    try {
        const response = await fetch(`${firebaseUrl}rooms/${currentRoomId}/${eventName}.json`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                ...data,
                timestamp: Date.now()
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        updateDebug(`‚úÖ –°–∏–≥–Ω–∞–ª ${eventName} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Firebase`);
        return await response.json();
    } catch (error) {
        updateDebug(`‚ùå –û—à–∏–±–∫–∞ Firebase: ${error.message}`);
        throw error;
    }
}

// –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ polling Firebase
let pollingInterval = null;

function startListeningForAnswer() {
    if (pollingInterval) return;
    
    pollingInterval = setInterval(async () => {
        try {
            const response = await fetch(`${firebaseUrl}rooms/${currentRoomId}/answer.json`);
            if (response.ok) {
                const data = await response.json();
                if (data && data.senderId !== myId && data.signal) {
                    clearInterval(pollingInterval);
                    pollingInterval = null;
                    handleAnswer(data);
                    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
                    await fetch(`${firebaseUrl}rooms/${currentRoomId}/answer.json`, { method: 'DELETE' });
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ polling
        }
    }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—É–±–∏—Ä–∞–µ–º Pusher, –∏—Å–ø–æ–ª—å–∑—É–µ–º Firebase)
function initConnection() {
    updateDebug('üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º Firebase –∫–∞–∫ WebSocket relay');
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
function joinRoom(roomId) {
    if (!roomId.trim()) {
        updateStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã', 'error');
        return;
    }

    currentRoomId = roomId;
    updateStatus('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ...', 'waiting');
    
    updateDebug(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}, –º–æ–π ID: ${myId}`);
    updateStatus('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ, —Å–æ–∑–¥–∞—é WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...', 'waiting');
    
    // –°–æ–∑–¥–∞–µ–º peer –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
    createPeer(true);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
    startListeningForAnswer();
}

// –°–æ–∑–¥–∞–Ω–∏–µ peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function createPeer(initiator) {
    peer = new SimplePeer({ 
        initiator: initiator, 
        trickle: false 
    });

    peer.on('signal', async (data) => {
        updateDebug('üì° –ì–µ–Ω–µ—Ä–∏—Ä—É—é WebRTC offer...');
        updateStatus('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ WebRTC —á–µ—Ä–µ–∑ Firebase...', 'waiting');
        
        try {
            await sendSignalToFirebase('offer', {
                signal: data,
                senderId: myId
            });
            updateStatus('‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞...', 'waiting');
        } catch (error) {
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞', 'error');
        }
    });

    peer.on('connect', () => {
        isConnected = true;
        updateStatus('‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª', 'connected');
        
        if (jsonString) {
            sendInChunks(jsonString);
        }
    });

    peer.on('error', err => {
        console.error('–û—à–∏–±–∫–∞ WebRTC:', err);
        updateStatus('‚ùå –û—à–∏–±–∫–∞ WebRTC: ' + err.message, 'error');
        updateDebug(`‚ùå WebRTC –æ—à–∏–±–∫–∞: ${err.message}`);
    });

    peer.on('close', () => {
        updateStatus('üîå WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'waiting');
        isConnected = false;
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è
function handleAnswer(data) {
    updateDebug('üì° –ü–æ–ª—É—á–µ–Ω WebRTC answer —á–µ—Ä–µ–∑ Firebase');
    updateStatus('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ WebRTC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'waiting');
    
    try {
        if (data.senderId !== myId && data.signal) {
            peer.signal(data.signal);
            updateDebug('‚úÖ Answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        } else {
            updateDebug('‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:', e);
        updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞', 'error');
        updateDebug(`‚ùå –û—à–∏–±–∫–∞ answer: ${e.message}`);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç—è–º–∏ —á–µ—Ä–µ–∑ WebRTC
function sendInChunks(data) {
    updateStatus('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ JSON —á–µ—Ä–µ–∑ WebRTC...', 'waiting');
    updateDebug(`üì¶ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ (${data.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    let offset = 0;
    
    function sendChunk() {
        if (!isConnected) {
            updateDebug('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
            return;
        }
        
        if (offset < data.length) {
            const chunk = data.slice(offset, offset + CHUNK_SIZE);
            try {
                peer.send(chunk);
                offset += CHUNK_SIZE;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const progress = Math.round((offset / data.length) * 100);
                updateStatus(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebRTC: ${progress}%`, 'waiting');
                
                setTimeout(sendChunk, 10);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ chunk:', e);
                updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebRTC', 'error');
                updateDebug(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ chunk: ${e.message}`);
                return;
            }
        } else {
            peer.send("__EOF__");
            updateStatus('‚úÖ JSON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ WebRTC!', 'connected');
            updateDebug('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    }
    
    sendChunk();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus(message, type = '') {
    const statusEl = document.getElementById('coop-send-status');
    statusEl.textContent = message;
    statusEl.className = `status ${type}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function updateDebug(message) {
    const debugEl = document.getElementById('coop-send-debug');
    const time = new Date().toLocaleTimeString();
    debugEl.innerHTML += `<div>[${time}] ${message}</div>`;
    debugEl.scrollTop = debugEl.scrollHeight;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const lines = debugEl.children;
    if (lines.length > 50) {
        debugEl.removeChild(lines[0]);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('coop-send-connect-button').onclick = () => {
    const roomId = document.getElementById('coop-send-room').value;
    initConnection();
    document.getElementById('coop-send-connect-button').disabled = true;
    joinRoom(roomId);
};

/*document.getElementById('file').addEventListener('change', e => {
    const file = e.target.files[0];
    if (!file) return;

    updateStatus('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...', 'waiting');
    updateDebug(`üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª: ${file.name} (${file.size} –±–∞–π—Ç)`);
    const reader = new FileReader();
    
    reader.onload = () => {
        try {
            const json = JSON.parse(reader.result);
            jsonString = JSON.stringify(json);
            updateStatus('üìÅ JSON –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ WebRTC', 'waiting');
            updateDebug(`‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${jsonString.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            if (isConnected) {
                sendInChunks(jsonString);
            } else {
                updateStatus('‚è≥ JSON –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞—é WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', 'waiting');
            }
        } catch (err) {
            updateStatus('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–∞–π–ª', 'error');
            updateDebug(`‚ùå JSON –æ—à–∏–±–∫–∞: ${err.message}`);
        }
    };
    
    reader.readAsText(file);
});*/

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    updateDebug('üöÄ Sender –∑–∞–≥—Ä—É–∂–µ–Ω');
    updateDebug('üî• Firebase —Å–∏–≥–Ω–∞–ª—ã + üîó WebRTC –¥–∞–Ω–Ω—ã–µ');
});
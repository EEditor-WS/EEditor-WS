const DISCORD_CLIENT_ID = '1333948751919972434';
const DISCORD_REDIRECT_URI = window.location.origin + '/auth/discord/callback';
const GITHUB_DATA_REPO = 'EE-Apps/eeditor-ws-data';
const COOKIE_NAME = 'ee_auth';
const COOKIE_EXPIRES_DAYS = 30;

// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏
const GITHUB_TOKEN_PARTS = [
    'github_pat_11A6XWVIA0',
    'qvCkkNmpWI3D_gdd4odbqw',
    'dOdlI420lYVKHk21LGkWD',
    'JLUFHMiaX5iJsVW32TDXST31OsDw2'
];

function getGithubToken() {
    return GITHUB_TOKEN_PARTS.join('');
}

class AuthCallback {
    constructor() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthCallback...');
        this.handleCallback();
    }

    showError(message) {
        console.error('‚ùå', message);
        const loader = document.querySelector('.loader');
        if (loader) {
            loader.style.display = 'none';
        }

        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            window.location.href = '/';
        }, 3000);
    }

    async checkAndCreateUserFile(userData) {
        try {
            const githubToken = getGithubToken();
            if (!githubToken) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GitHub');

            const filename = `users/${userData.id}.json`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            try {
                const checkResponse = await fetch(`https://api.github.com/repos/${GITHUB_DATA_REPO}/contents/${filename}`, {
                    headers: {
                        'Authorization': `Bearer ${githubToken}`,
                    }
                });

                if (checkResponse.status === 404) {
                    // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                    const now = new Date();
                    const moscowTime = new Date(now.getTime() + (3 * 60 * 60 * 1000)); // UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã

                    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    const savedLang = localStorage.getItem('selectedLanguage') || 'ru';
                    console.log('üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', savedLang);

                    const userFileData = {
                        name: userData.username,
                        id: `@${userData.username}`,
                        nid: userData.id,
                        reg: now.getTime(),
                        regt: moscowTime.toISOString(),
                        lang: savedLang,
                        countries: [],
                        reforms: [],
                        events: [],
                        maps: [],
                        scenarios: [],
                        status: "user"
                    };

                    const content = btoa(JSON.stringify(userFileData, null, 2));
                    const createResponse = await fetch(`https://api.github.com/repos/${GITHUB_DATA_REPO}/contents/${filename}`, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `Bearer ${githubToken}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: `Create user data for ${userData.username}`,
                            content: content,
                            branch: 'main'
                        })
                    });

                    if (!createResponse.ok) {
                        throw new Error('Failed to create user file');
                    }
                    console.log('‚úÖ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                } else {
                    console.log('‚úÖ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                throw error;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    async handleCallback() {
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback...');
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL
            const fragment = new URLSearchParams(window.location.hash.slice(1));
            const accessToken = fragment.get('access_token');
            const error = fragment.get('error');
            const errorDescription = fragment.get('error_description');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ URL
            if (error) {
                throw new Error(errorDescription || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Discord');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            if (!accessToken) {
                throw new Error('–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
            }

            console.log('üîë –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—É—á–µ–Ω');

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Discord
            const response = await fetch('https://discord.com/api/users/@me', {
                headers: {
                    Authorization: `Bearer ${accessToken}`
                }
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`);
            }

            const data = await response.json();
            console.log('üë§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userData = {
                id: data.id,
                username: data.username,
                displayName: data.global_name || data.username,
                avatar: data.avatar ? `https://cdn.discordapp.com/avatars/${data.id}/${data.avatar}.png` : null,
                lastLogin: new Date().toISOString()
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.checkAndCreateUserFile(userData);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            localStorage.setItem('userData', JSON.stringify(userData));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            window.location.href = '/';
        } catch (error) {
            this.showError(error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
window.authCallback = new AuthCallback(); 
